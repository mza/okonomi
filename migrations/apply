#!/usr/bin/env bash
# migrations/apply - Simple migration runner for okonomi
# Applies migrations to the live system with state tracking

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
MIGRATIONS_DIR="$SCRIPT_DIR"
STATE_DIR="${XDG_STATE_HOME:-$HOME/.local/state}/okonomi/migrations"

# Colors for output
RED='\e[31m'
GREEN='\e[32m'
YELLOW='\e[33m'
BLUE='\e[34m'
RESET='\e[0m'

log_info() { echo -e "${BLUE}ℹ${RESET} $*"; }
log_success() { echo -e "${GREEN}✓${RESET} $*"; }
log_warn() { echo -e "${YELLOW}⚠${RESET} $*"; }
log_error() { echo -e "${RED}✗${RESET} $*"; }

log_info "Applying okonomi migrations..."

# Create state directory
mkdir -p "$STATE_DIR"

# Track applied migrations
new_count=0
skipped_count=0

for migration in "$MIGRATIONS_DIR"/[0-9]*.sh; do
  [[ -f "$migration" ]] || continue
  name=$(basename "$migration")
  state_file="$STATE_DIR/$name"

  if [[ -f "$state_file" ]]; then
    skipped_count=$((skipped_count + 1))
    continue
  fi

  log_info "→ $name"
  if bash "$migration"; then
    touch "$state_file"
    new_count=$((new_count + 1))
    log_success "Applied: $name"
  else
    log_error "Migration $name failed!"
    exit 1
  fi
done

if [[ $new_count -eq 0 ]]; then
  log_success "System up to date (no new migrations)"
else
  log_success "Applied $new_count new migrations ($skipped_count already applied)"
fi
